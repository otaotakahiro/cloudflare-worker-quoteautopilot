---
description:
globs:
alwaysApply: false
---
# アーキテクチャパターン

このプロジェクトは厳密なクリーンアーキテクチャの原則に従って設計されています。依存関係の方向は内側（ドメイン層）から外側（インフラストラクチャ層）に向かうように厳密に管理され、依存性の逆転の原則によって各層の独立性を保っています。

## プロジェクトの概要と特徴

本プロジェクトは以下の特徴を持つモノレポ構成です。

- **実行環境**: フロントエンドとバックエンド API は、共に Cloudflare Workers 上で動作します。
- **フロントエンド**: [src/Infrastructure/Client](mdc:src/Infrastructure/Client) に配置された Vue.js アプリケーションです。
- **バックエンド API**: [src/Infrastructure/EntryPoint/worker.entry.ts](mdc:src/Infrastructure/EntryPoint/worker.entry.ts) をエントリーポイントとする Hono フレームワークを用いた API です。
- **連携方法**: フロントエンドとバックエンド API 間の通信には Hono RPC を採用し、型安全な連携を実現しています。
- **論理的分離**: 物理的には同じ Cloudflare Workers 環境で実行されますが、クリーンアーキテクチャの観点からは、フロントエンドとバックエンド API は論理的に分離されたコンポーネントとして扱われます。フロントエンドからバックエンド API へのリクエストは、[src/Infrastructure/Gateway/HonoApi.gateway.ts](mdc:src/Infrastructure/Gateway/HonoApi.gateway.ts) のようなゲートウェイ実装を介して行われ、これはフロントエンドにとって「外部 API 呼び出し」として抽象化されます。

## クリーンアーキテクチャ 4 層構造

### 依存関係の方向

```
Interface → Application → Domain
    ↓           ↓
Infrastructure ←┘
```

**重要な原則**: 内側の層は外側の層に依存してはいけません。外側の層が内側の層に依存する構造となっています。

## アーキテクチャ層とファイル命名規則

### 1. ドメイン層 (Domain Layer) - 最内層

ビジネスロジックの中核をなす層で、他のどの層にも依存しません。

###ty

- **役割**: アプリケーションのビジネスオブジェクト（エンティティ）を定義
- **命名規則**: `{EntityName}.entity.ts`
- **例**: `LighthouseResult.entity.ts`, `User.entity.ts`

###ue

- **役割**: 値オブジェクトを定義（不変オブジェクト）
- **命名規則**: `{ValueName}.value.ts`
- **例**: `Email.value.ts`, `Money.value.ts`

###ce

- **役割**: ドメインサービス（複数のエンティティにまたがるビジネスロジック）
- **命名規則**: `{ServiceName}.service.ts`
- **例**: `UserValidation.service.ts`

###rt

- **役割**: ドメイン層が外部（インフラストラクチャ層）とやり取りするためのインターフェース（ポート）
- **命名規則**: `I{InterfaceName}.repository.ts`
- **例**tsts
- **重要**: これらは依存性の逆転を実現するための抽象インターフェースです

### 2. アプリケーション層 (Application Layer)

アプリケーション固有のビジネスルールとユースケースを実装します。

###se

- **役割**: アプリケーション固有のビジネスルール（ユースケース）を実装
- **命名規則**: `{ActionName}.usecase.ts`
- **例**ts

###ce

- **役割**: アプリケーションサービス（ユースケース間の共通処理）
- **命名規則**: `{ServiceName}.service.ts`
- **例**: `EmailNotification.service.ts`

###rt

- **役割**: アプリケーション層が外部（インターフェース層）とやり取りするためのインターフェース
- **命名規則**: `I{InterfaceName}.adapter.ts`
- **例**ts

### 3. インターフェース層 (Interface Layer) - 最外層

外部からの入力を受け付け、ユースケースを実行し、結果を外部に返します。

###er

- **役割**: 外部（例: HTTP リクエスト）からの入力を受け付け、ユースケースを実行
- **命名規則**: `{ControllerName}.controller.ts`
- **例**ts

###er

- **役割**: ユースケースの結果を外部が期待する形式に変換
- **命名規則**: `{PresenterName}.presenter.ts`
- **例**: `UserProfile.presenter.ts`

###er

- **役割**: データの変換や処理の適応を行う
- **命名規則**: `{AdapterName}.adapter.ts`
- **例**ts

### 4. インフラストラクチャ層 (Infrastructure Layer)

フレームワーク、具体的なツール、外部ライブラリなど、技術的な詳細を実装する層です。

###nt

- **役割**: アプリケーションのエントリーポイント
- **命名規則**: `{Platform}.entry.ts`
- \*_例_.t.t.ts

##ory

- **役割**: ドメイン層のポートの具体的な実装
- **命名規則**: `{RepositoryName}.repository.ts`
- **例**: `UserRepository.repository.ts`, `BrowserQueue.repository.ts`
- **重要**: こPort で定義されたインターフェースを実装します

#eway

- **役割**: 外部 API やサービスとの通信を担当
- **命名規則**: `{GatewayName}.gateway.ts`
- \*\*ay.ts
- **サブディレクトリ**: 関心事ごとに整oogle）

lient

- **役割**: Vue.js を用いたフロントエンドアプリケーションの実装
- **構成**: コンポーネント、ルーター、アセットなどを含む
  Worker

- **役割**: Cloudflare Workers 固有の実装

### 5. 共有層 (Shared Layer)

複数の層で使用される共通要素を配置します。ntainer

- **役割**: 依存性注入（DI）コンテナの実装
- **命名規則**: `{Purpose}.container.ts`
  -aiainer.ts
- \*\*コアainer.tred/Type

- **役割**: 全体で使用される型定義
- **命名規則**: `{TypeName}.d.ts`
  tion.d.ts

## コーディング規約

### TypeScript/JavaScript/Vue.js

- 純粋な関数には `function` キーワードを使用してください。
- 変数宣言は `const` を優先し、`let` は極力使用しないでください。
- クラスのプロパティは `readonly` を使い、コンストラクター内で初期化してください。
- すべてのクラスメンバーには明示的にアクセス修飾子を付与してください (`public` / `private` / `protected` など)。
  - `constructor` にもアクセス修飾子を付与してください。
  - `public` の場合も省略せず明示的に付与してください。
- 三項演算子は可読性を損ねるため使用しないでください。
  - `if` 文を使用するか、IIFE を使用して関数内で `if` 文を使って代替してください。
- nullable な値の判定には `||` ではなく `??` (Null 合体演算子) を使用してください。
- `!` (非 null アサーション演算子) は使用しないでください。
- 関数やメソッドの戻り値の型は、型推論可能な場合は明示的に指定しないでください。
- クラス・関数・メソッドには JSDoc でコメントをつけてください。
  - 特に注意が必要な場合の除いて、`@param` や `@return` の JSDoc コメントは不要です。
  - 特に注意すべき仕様など、公式ドキュメントなどの参照を促す場合は `@url` をつけてください。
- プロジェクトに Linter が設定されている場合は、それに従ってください。

### Vue.js 固有の規約

- シングルファイルコンポーネントの各ブロックは `<script>`, `<template>`, `<style>` の順で書いてください。
- その他のコンポーネントを参照し、それらに合わせた記述をしてください。
  - 例) TypeScript で setup シンタックスが使用されている場合は、`<script lang="ts" setup>` を採用する。
  - 例) SCSS で CSS モジュールが使用されている場合は、`<style lang="scss" module>` を採用する。
  - デフォルトでは `<script lang="ts" setup>`, `<style lang="scss" module>` で書いてください。
- プロジェクトに Linter が設定されている場合は、それに従ってください。

## 重要な原則

1. **依存性の逆転**: 内側の層は外側の層に依存してはいけません
2. **単一責任**: 各クラス・モジュールは一つの責任のみを持ちます
3. **開放閉鎖**: 拡張に対して開いており、変更に対して閉じています
4. **インターフェース分離**: クライアントは使用しないインターフェースに依存を強制されません
5. **ポートアダプター**: 外部との境界はポート（インターフェース）とアダプター（実装）で分離されます
